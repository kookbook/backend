# Welcome to Serverless!
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: kookbook

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-central-1
  profile: netlight
  tags:
    project: kookbook
    creator: Peter Pult
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
        - sqs:ListQueues
      Resource:
        - Fn::GetAtt: getHtmlQueue.Arn
        - Fn::GetAtt: parseHtmlQueue.Arn
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:PutItem
      Resource:
        Fn::GetAtt: recipeTable.Arn
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: 'arn:aws:s3:::${self:custom.htmlBucketName}/*'


custom:
  getHtmlQueueName: '${self:service}-${self:provider.stage}-getHtmlQueue'
  parseHtmlQueueName: '${self:service}-${self:provider.stage}-parseHtmlQueue'
  recipeTableName: '${self:service}-${self:provider.stage}-recipeTable'
  htmlBucketName: '${self:service}-${self:provider.stage}-htmlbucket' # Can not use camel casing in bucket name.


functions:
  recipes:
    handler: recipes.handler
    description: Handles CRUD for recipes.
    events:
      - http: post recipes
      - http: get recipes/{recipeId}
      - http: put recipes/{recipeId}
      - http: delete recipes/{recipeId}

  users:
    handler: users.handler
    description: Handles CRUD for users.
    events:
      - http: post users
      - http: get users/{userId}
      - http: put users/{userId}
      - http: delete users/{userId}

  kookbooks:
    handler: kookbooks.handler
    description: Handles CRUD for kookbooks.
    events:
      - http: post users/{userId}/kookbooks
      - http: get users/{userId}/kookbooks/{kookbookId}
      - http: put users/{userId}/kookbooks/{kookbookId}
      - http: delete users/{userId}/kookbooks/{kookbookId}

  links:
    handler: lib/links.handler
    description: Handles link adding.
    events:
      - http: post links
    environment:
      GET_QUEUE_URL:
        Ref: getHtmlQueue
      RECIPE_TABLE:
        Ref: recipeTable

  getHtml:
    handler: lib/getHtml.handler
    description: Get raw HTML code from url.
    events:
      - sqs:
          arn:
            Fn::GetAtt: getHtmlQueue.Arn
    environment:
      PARSE_QUEUE_URL:
        Ref: parseHtmlQueue
      HTML_BUCKET_NAME:
        Ref: htmlBucket

  parseHtml:
    handler: lib/parseHtml.handler
    description: Parse raw HTML code to recipe object.
    events:
      - sqs:
          arn:
            Fn::GetAtt: parseHtmlQueue.Arn


resources:
  Resources:
    htmlBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: '${self:custom.htmlBucketName}'
    getHtmlQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: '${self:custom.getHtmlQueueName}'
    parseHtmlQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: '${self:custom.parseHtmlQueueName}'
    recipeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: sourceUrl
            AttributeType: S
        KeySchema:
          - AttributeName: sourceUrl
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: '${self:custom.recipeTableName}'
